#!/bin/bash
#
# ssh-reverse-tunnel - Create multiple SSH reverse tunnels
#
#    Copyright (C) 2019 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program. See <http://www.gnu.org/licenses/gpl.html>

# Factory settings, overridden by config file: ~/.config/ssh-reverse-tunnel.conf
ports=(22 80 443)
hostopts=(user@example.com -p 2222)
portoffset=10000
sshopts=(
	# Time without data to check if server is alive. Default: 0, no check
	-o ServerAliveInterval=10
	# Attempts for above check to fail before disconnecting. Default: 3
	-o ServerAliveCountMax=3
	# Both combined means disconnect if server is unresponsive for 30 seconds

	# Periodically send TCP KeepAlive messages. Default: already 'yes'
	# Not directly related to the above options, might prevent server timeouts
	-o TCPKeepAlive=yes

	# Disconnect if ssh cannot set up port forwarding. Default: 'no'
	-o ExitOnForwardFailure=yes

	# Do not ask confirmation for new hosts and accept changed host keys
	# Default: 'ask', confirmation required for new and reject changed keys
	-o StrictHostKeyChecking=no

	# File to save host keys, hereby discarded so all hosts are considered new
	# Default: '~/.ssh/known_hosts'
	-o UserKnownHostsFile=/dev/null
)

config=${SSH_REVERSE_TUNNEL_CONFIG:-${XDG_CONFIG_HOME:-$HOME/.config}/ssh-reverse-tunnel.conf}
keyfile=$HOME/.ssh/id_rsa.ssh-reverse-tunnel.nopassword
pidfile=$HOME/.ssh/ssh-reverse-tunnel.pid

# Read config or create a default one
if [[ -f "$config" ]]; then
	# shellcheck source=ssh-reverse-tunnel.conf
	source "$config"
else
	cat > "$config" <<-EOF
		# ssh-reverse-tunnel settings
		ports=(${ports[@]})
		hostopts=(${hostopts[@]})
		portoffset=$portoffset
		sshopts=(${sshopts[@]})
	EOF
	echo "New config created, edit it and try again: $config" >&2
	exit 1
fi

ssh_close() {
	if [[ -e "$pidfile" ]]; then
		kill "$(<"$pidfile")" 2>/dev/null  # $pidfile might be leftover
		rm -f -- "$pidfile"  # autossh deletes it if closed normally
	fi
}

# FIXME: This only checks if autossh is running, NOT if ssh is actually connected!
# As such this also return success even if ssh failed to connect, as autossh
# will simply re-start ssh. This seems to be an autossh limitation when using -f
ssh_status() {
	if [[ -e "$pidfile" ]]; then
		local output
		if output=$(ps --no-headers "$(<"$pidfile")"); then
			echo "$output"
			return
		fi
	fi
	return 1
}

if [[ "${1:-}" ]]; then
	case "$1" in
	-h|--help  ) echo -e 'Create or close multiple SSH reverse tunnels\n'\
	                     'Usage: ssh-reverse-tunnel [--close|--status]'
	             exit;;
	-c|--close ) ssh_close; exit;;
	-q|--quit  ) ssh_close; exit;;
	   --stop  ) ssh_close; exit;;
	-s|--status) ssh_status; exit;;
	   --start ) ;;
	          *) echo -e "Invalid option: $1" >&2; exit;;
	esac
fi

keyargs=()
if [[ "$keyfile" ]]; then
	# Create a password-less SSH key and upload to server
	if ! [[ -f "$keyfile" ]]; then
		ssh-keygen -f "$keyfile" -P "" \
			-C "${USER}.ssh-reverse-tunnel.nopassword@${HOSTNAME}"
		chmod 0600 -- "$keyfile"
		chmod 0644 -- "$keyfile".pub
		ssh-copy-id -i "$keyfile" "${hostopts[@]}"
	fi
	keyargs+=(-i "$keyfile")
fi

# Map remote ports using the rule: remote port = local port + port offset
map=()
for port in "${ports[@]}"; do
	rport=$((port + portoffset))
	map+=(-R "${rport}:localhost:${port}")
done

# Close existing tunnels
ssh_close

# Create the reverse SSH tunnels
export AUTOSSH_PIDFILE=$pidfile
export SSH_AUTH_SOCK=0  # disable ssh-agent

autossh -f -M "$portoffset" -- \
	-TNn "${sshopts[@]}" "${keyargs[@]}" "${hostopts[@]}" "${map[@]}"
